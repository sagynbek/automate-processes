{"version":3,"sources":["pages/dashboard/DashboardPage.tsx","pages/text-into-paragraph/TextIntoParagraph.tsx","helper/index.ts","router/AppRouter.tsx","components/Header.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["DashboardPage","TextIntoParagraph","useState","text","setText","result","setResult","isCapitalizeEnabled","setIsCapitalizeEnabled","isCopyToClipboardEnabled","setIsCopyToClipboardEnabled","isTriggerOnChangeEnabled","setIsTriggerOnChangeEnabled","useEffect","textIntoParagraphFunc","it","length","toUpperCase","toLowerCase","trim","slice","el","document","createElement","value","body","appendChild","select","execCommand","removeChild","toast","type","copyToClipboard","console","log","className","name","checked","onChange","e","target","disabled","onClick","AppRouter","exact","path","component","Header","to","App","basename","position","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kPAUeA,EARO,WACpB,OACE,0C,gBCoEWC,EAnEW,WAAO,IAAD,EACNC,mBAAS,IADH,mBACvBC,EADuB,KACjBC,EADiB,OAEFF,mBAAS,IAFP,mBAEvBG,EAFuB,KAEfC,EAFe,OAGwBJ,oBAAS,GAHjC,mBAGvBK,EAHuB,KAGFC,EAHE,OAIkCN,oBAAS,GAJ3C,mBAIvBO,EAJuB,KAIGC,EAJH,OAKkCR,oBAAS,GAL3C,mBAKvBS,EALuB,KAKGC,EALH,KAQ9BC,qBAAU,WACRF,GAA4BG,EAAsBX,KACjD,CAACA,IAEJ,IAMMW,EAAwB,SAACX,GAC7B,GAAKA,EAAL,CAGA,IADA,IAAIE,EAAS,GACJU,EAAK,EAAGA,EAAKZ,EAAKa,OAAQD,IACjCV,GAAUF,EAAKY,GAAIE,gBAAkBd,EAAKY,GACxC,IAAMZ,EAAKY,GAAIG,cACbf,EAAKY,GAEXV,EAASA,EAAOc,OAChBd,EAASE,GAAuBF,EAAUA,EAAO,GAAGY,cAAgBZ,EAAOe,MAAM,GAAMf,EAEvFI,GCjC2B,SAACN,GAC9B,IAAMkB,EAAKC,SAASC,cAAc,YAClCF,EAAGG,MAAQrB,EACXmB,SAASG,KAAKC,YAAYL,GAC1BA,EAAGM,SACHL,SAASM,YAAY,QACrBN,SAASG,KAAKI,YAAYR,GAE1BS,YAAM,uBAAwB,CAAEC,KAAM,SDyBRC,CAAgB3B,GAE5CC,EAAUD,KAIZ,OAFA4B,QAAQC,IAAI7B,GAGV,6BACE,yBAAK8B,UAAU,IACb,8BACE,2BAAOC,KAAK,aAAaL,KAAK,WAAWM,QAAS9B,EAAqB+B,SAAU,WAAQ9B,GAAwBD,MADnH,eAGA,8BACE,2BAAO6B,KAAK,YAAYL,KAAK,WAAWM,QAAS5B,EAA0B6B,SAAU,WAAQ5B,GAA6BD,MAD5H,sBAGA,8BACE,2BAAO2B,KAAK,kBAAkBL,KAAK,WAAWM,QAAS1B,EAA0B2B,SAAU,WAAQ1B,GAA6BD,MADlI,sBAMF,yBAAKwB,UAAU,YACb,8BAAUC,KAAK,OAAOZ,MAAOrB,EAAMmC,SAxCpB,SAACC,GACpBnC,EAAQmC,EAAEC,OAAOhB,WA0Cf,yBAAKW,UAAU,aACb,8BAAUC,KAAK,SAASZ,MAAOnB,EAAQoC,UAAQ,KAGjD,yBAAKN,UAAU,iBACb,4BAAQO,QAAS,WAAQ5B,EAAsBX,KAA/C,wBE9COwC,EATG,WAChB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9C,IACjC,kBAAC,IAAD,CAAO4C,OAAK,EAACC,KAAK,uBAAuBC,UAAW7C,M,eCF3C8C,EATA,WACb,OACE,4BAAQZ,UAAU,cAChB,kBAAC,IAAD,CAAMa,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,wBAAT,iCCaSC,MAZf,WACE,OACE,kBAAC,IAAD,CAAeC,SAAS,sBACtB,kBAAC,EAAD,MACA,yBAAKf,UAAU,aACb,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAgBgB,SAAS,mBCHXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASsC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.0ecc7470.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst DashboardPage = () => {\r\n  return (\r\n    <div>\r\n      Dashoard\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DashboardPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { copyToClipboard } from 'src/helper';\r\n\r\n\r\n\r\nconst TextIntoParagraph = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [result, setResult] = useState(\"\");\r\n  const [isCapitalizeEnabled, setIsCapitalizeEnabled] = useState(true);\r\n  const [isCopyToClipboardEnabled, setIsCopyToClipboardEnabled] = useState(true);\r\n  const [isTriggerOnChangeEnabled, setIsTriggerOnChangeEnabled] = useState(true);\r\n\r\n\r\n  useEffect(() => {\r\n    isTriggerOnChangeEnabled && textIntoParagraphFunc(text);\r\n  }, [text]);\r\n\r\n  const onTextChange = (e: any) => {\r\n    setText(e.target.value);\r\n  }\r\n\r\n\r\n\r\n  const textIntoParagraphFunc = (text: string) => {\r\n    if (!text) { return; }\r\n\r\n    let result = \"\";\r\n    for (let it = 0; it < text.length; it++) {\r\n      result += text[it].toUpperCase() === text[it] ?\r\n        \" \" + text[it].toLowerCase()\r\n        : text[it];\r\n    }\r\n    result = result.trim();\r\n    result = isCapitalizeEnabled && result ? (result[0].toUpperCase() + result.slice(1)) : result;\r\n\r\n    isCopyToClipboardEnabled && copyToClipboard(result);\r\n\r\n    setResult(result);\r\n  }\r\n  console.log(result)\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"\">\r\n        <span>\r\n          <input name=\"capitalize\" type=\"checkbox\" checked={isCapitalizeEnabled} onChange={() => { setIsCapitalizeEnabled(!isCapitalizeEnabled) }} /> Capitalize\r\n        </span>\r\n        <span>\r\n          <input name=\"clipboard\" type=\"checkbox\" checked={isCopyToClipboardEnabled} onChange={() => { setIsCopyToClipboardEnabled(!isCopyToClipboardEnabled) }} /> Copy to clipboard\r\n        </span>\r\n        <span>\r\n          <input name=\"instant-trigger\" type=\"checkbox\" checked={isTriggerOnChangeEnabled} onChange={() => { setIsTriggerOnChangeEnabled(!isTriggerOnChangeEnabled) }} /> Trigger on chage\r\n        </span>\r\n\r\n      </div>\r\n\r\n      <div className=\"left-box\">\r\n        <textarea name=\"text\" value={text} onChange={onTextChange} />\r\n      </div>\r\n\r\n      <div className=\"right-box\">\r\n        <textarea name=\"result\" value={result} disabled />\r\n      </div>\r\n\r\n      <div className=\"center-action\">\r\n        <button onClick={() => { textIntoParagraphFunc(text) }}>Copy to clipboard</button>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TextIntoParagraph;\r\n","import { toast } from \"react-toastify\";\r\n\r\nexport const copyToClipboard = (text: any) => {\r\n  const el = document.createElement('textarea');\r\n  el.value = text;\r\n  document.body.appendChild(el);\r\n  el.select();\r\n  document.execCommand('copy');\r\n  document.body.removeChild(el);\r\n\r\n  toast(\"Copied to clipboard!\", { type: \"info\" });\r\n  return true;\r\n}","import React from 'react';\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport DashboardPage from 'src/pages/dashboard/DashboardPage';\r\nimport TextIntoParagraph from 'src/pages/text-into-paragraph/TextIntoParagraph';\r\n\r\n\r\nconst AppRouter = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={DashboardPage} />\r\n      <Route exact path=\"/text-into-paragraph\" component={TextIntoParagraph} />\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default AppRouter;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"App-header\">\r\n      <Link to=\"/\">Home</Link>\r\n      <Link to=\"/text-into-paragraph\">Convert text into paragraph</Link>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport AppRouter from 'src/router/AppRouter';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Header from 'src/components/Header';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"automate-processes\">\n      <Header />\n      <div className=\"container\">\n        <AppRouter />\n      </div>\n      <ToastContainer position=\"bottom-right\" />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'src/styles/index.css';\nimport App from 'src/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}